"""
================
Confusion matrix
================

Example of confusion matrix usage to evaluate the quality
of the output of a classifier on the iris data set. The
diagonal elements represent the number of points for which
the predicted label is equal to the true label, while
off-diagonal elements are those that are mislabeled by the
classifier. The higher the diagonal values of the confusion
matrix the better, indicating many correct predictions.

The figures show the confusion matrix with and without
normalization by class support size (number of elements
in each class). This kind of normalization can be
interesting in case of class imbalance to have a more
visual interpretation of which class is being misclassified.

Here the results are not as good as they could be as our
choice for the regularization parameter C was not the best.
In real life applications this parameter is usually chosen
using :ref:`grid_search`.

"""

print(__doc__)

import os
import itertools
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn import metrics


# generate the class name
class_names = np.asarray(['SMC', 'AC', 'NMC', 'MC']).reshape((4, ))
c_n = np.asarray(['nil', 'hc']).reshape((2, ))
# generate y_pre and y_test, also class name
# VGG
# y_test = [2, 3, 2, 1, 2, 1, 1, 0, 3, 1, 0, 0, 1, 1, 2, 0, 2, 1, 1,
#           1, 2, 1, 1, 1, 0, 2, 3, 2, 2, 3, 0, 1, 1, 2, 1, 2, 3, 2,
#           2, 1, 1, 1, 2, 3, 2, 0, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1,
#           0, 3, 0, 1, 0, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 3,
#           1, 0, 2, 3, 1, 1, 0, 1, 2, 2, 3, 1, 1, 2, 2, 1, 3, 1, 2,
#           2, 2, 1, 2, 2, 3, 2, 0, 1, 2, 2, 0, 1, 1, 0, 2, 0, 2, 1,
#           2, 1, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 1, 2, 2, 0, 2, 1, 2,
#           1, 1, 3, 0, 0, 2, 1, 3, 2, 0, 1, 3, 2, 2, 1, 2, 0, 0, 3,
#           2, 1, 3, 1, 2, 2, 2, 1, 0, 0, 2, 2, 1, 2, 1, 1, 1, 3, 2,
#           2, 1, 1, 1, 1, 0, 2, 1, 1, 1, 2, 1, 2, 2, 2, 3, 1, 1, 1,
#           2, 3, 1, 1, 1, 1, 2, 1, 2, 0, 0, 1, 2, 2, 0, 2, 2, 0, 0,
#           1, 1, 2, 2, 0, 1, 2, 0, 2, 1, 2, 1, 2, 2, 0, 0, 0, 0, 3,
#           2, 1, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2,
#           3, 3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
#           3, 3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
#           3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
#           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
#           2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
#           2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
# y_pred = [2, 0, 2, 1, 2, 1, 2, 0, 3, 1, 0, 0, 1, 1, 2, 0, 2, 2, 2,
#           2, 2, 1, 1, 1, 0, 2, 3, 2, 2, 3, 0, 1, 1, 2, 1, 2, 3, 2,
#           2, 1, 1, 1, 2, 3, 1, 0, 2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 1,
#           2, 3, 0, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 3,
#           1, 0, 2, 0, 1, 1, 0, 2, 2, 2, 3, 1, 1, 2, 1, 1, 3, 1, 2,
#           2, 1, 2, 2, 1, 0, 2, 1, 2, 2, 2, 0, 1, 2, 0, 2, 2, 2, 2,
#           2, 2, 1, 2, 2, 2, 1, 0, 1, 2, 0, 0, 1, 2, 2, 0, 2, 0, 2,
#           1, 2, 3, 1, 0, 2, 1, 3, 2, 0, 1, 3, 2, 2, 1, 2, 0, 0, 0,
#           2, 1, 3, 1, 2, 1, 2, 1, 0, 2, 2, 2, 1, 2, 1, 1, 0, 1, 2,
#           2, 1, 0, 2, 1, 0, 2, 1, 1, 1, 2, 2, 2, 2, 2, 0, 1, 1, 1,
#           2, 3, 1, 1, 2, 1, 2, 2, 2, 0, 0, 1, 2, 2, 0, 2, 2, 0, 0,
#           1, 1, 2, 2, 0, 1, 1, 0, 2, 1, 2, 1, 2, 2, 0, 0, 1, 0, 3,
#           2, 1, 2, 1, 0, 0, 3, 1, 2, 2, 2, 2,
#           3, 3 ,2 ,2 ,3 ,3 ,3 ,3 ,3 ,3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
#           3, 3 ,3 ,3 ,1 ,3 ,2 ,3 ,0 ,3, 0, 3, 3, 3, 0, 3, 2, 2, 3,
#           2, 1, 0, 2, 2, 3, 3, 0, 1, 2, 0, 0, 1, 1, 1, 2, 2, 1, 1,
#           0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 2, 3, 0, 1, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
#           2, 1, 0, 1, 1, 1, 1, 3, 1, 1, 0, 0, 1, 1, 1, 2, 2, 1, 1,
#           2, 1, 0, 1, 1, 1, 1, 3, 0, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1,
#           1, 1, 0, 2, 0, 3, 3, 3, 1, 2, 0, 2, 1, 1, 1, 2, 1, 2, 1,
#           0, 1, 0, 2, 2, 3, 3, 3, 1, 2, 0, 0, 1, 0, 1, 2, 2, 1, 1,]

# inception
# y_test = [2, 3, 2, 1, 2, 1, 1, 0, 3, 1, 0, 0, 1, 1, 2, 0, 2, 1, 1,
#           1, 2, 1, 1, 1, 0, 2, 3, 2, 2, 3, 0, 1, 1, 2, 1, 2, 3, 2,
#           2, 1, 1, 1, 2, 3, 2, 0, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1,
#           0, 3, 0, 1, 0, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 3,
#           1, 0, 2, 3, 1, 1, 0, 1, 2, 2, 3, 1, 1, 2, 2, 1, 3, 1, 2,
#           2, 2, 1, 2, 2, 3, 2, 0, 1, 2, 2, 0, 1, 1, 0, 2, 0, 2, 1,
#           2, 1, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 1, 2, 2, 0, 2, 1, 2,
#           1, 1, 3, 0, 0, 2, 1, 3, 2, 0, 1, 3, 2, 2, 1, 2, 0, 0, 3,
#           2, 1, 3, 1, 2, 2, 2, 1, 0, 0, 2, 2, 1, 2, 1, 1, 1, 3, 2,
#           2, 1, 1, 1, 1, 0, 2, 1, 1, 1, 2, 1, 2, 2, 2, 3, 1, 1, 1,
#           2, 3, 1, 1, 1, 1, 2, 1, 2, 0, 0, 1, 2, 2, 0, 2, 2, 0, 0,
#           1, 1, 2, 2, 0, 1, 2, 0, 2, 1, 2, 1, 2, 2, 0, 0, 0, 0, 3,
#           2, 1, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2,
#           3, 3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
#           3, 3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
#           3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
#           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
#           2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
#           2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
# y_pred = [2, 0, 2, 1, 2, 1, 2, 0, 3, 1, 0, 0, 1, 1, 2, 0, 2, 2, 2,
#           2, 2, 1, 1, 1, 0, 2, 3, 2, 2, 3, 0, 1, 1, 2, 1, 2, 3, 2,
#           2, 1, 1, 1, 2, 3, 1, 0, 2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 1,
#           2, 3, 0, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 3,
#           1, 0, 2, 0, 1, 1, 0, 2, 2, 2, 3, 1, 1, 2, 1, 1, 3, 1, 2,
#           2, 1, 2, 2, 1, 0, 2, 1, 2, 2, 2, 0, 1, 2, 0, 2, 2, 2, 2,
#           2, 2, 1, 2, 2, 2, 1, 0, 1, 2, 0, 0, 1, 2, 2, 0, 2, 0, 2,
#           1, 2, 3, 1, 0, 2, 1, 3, 2, 0, 1, 3, 2, 2, 1, 2, 0, 0, 0,
#           2, 1, 3, 1, 2, 1, 2, 1, 0, 2, 2, 2, 1, 2, 1, 1, 0, 1, 2,
#           2, 1, 0, 2, 1, 0, 2, 1, 1, 1, 2, 2, 2, 2, 2, 0, 1, 1, 1,
#           2, 3, 1, 1, 2, 1, 2, 2, 2, 0, 0, 1, 2, 2, 0, 2, 2, 0, 0,
#           1, 1, 2, 2, 0, 1, 1, 0, 2, 1, 2, 1, 2, 2, 0, 0, 1, 0, 3,
#           2, 1, 2, 1, 0, 0, 3, 1, 2, 2, 2, 2,
#           3, 3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
#           3, 3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
#           2, 1, 0, 2, 2, 3, 3, 0, 1, 2, 0, 0, 1, 1, 1, 2, 2, 1, 1,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           2, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1,
#           2, 1, 0, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1,
#           2, 1, 0, 2, 2, 3, 3, 0, 1, 2, 0, 2, 1, 1, 1, 2, 2, 3, 1,
#           2, 1, 0, 2, 2, 3, 3, 0, 1, 2, 0, 0, 1, 1, 1, 2, 2, 1, 1,]

# Resnet
# y_test = [2, 3, 2, 1, 2, 1, 1, 0, 3, 1, 0, 0, 1, 1, 2, 0, 2, 1, 1,
#           1, 2, 1, 1, 1, 0, 2, 3, 2, 2, 3, 0, 1, 1, 2, 1, 2, 3, 2,
#           2, 1, 1, 1, 2, 3, 2, 0, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1,
#           0, 3, 0, 1, 0, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 3,
#           1, 0, 2, 3, 1, 1, 0, 1, 2, 2, 3, 1, 1, 2, 2, 1, 3, 1, 2,
#           2, 2, 1, 2, 2, 3, 2, 0, 1, 2, 2, 0, 1, 1, 0, 2, 0, 2, 1,
#           2, 1, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 1, 2, 2, 0, 2, 1, 2,
#           1, 1, 3, 0, 0, 2, 1, 3, 2, 0, 1, 3, 2, 2, 1, 2, 0, 0, 3,
#           2, 1, 3, 1, 2, 2, 2, 1, 0, 0, 2, 2, 1, 2, 1, 1, 1, 3, 2,
#           2, 1, 1, 1, 1, 0, 2, 1, 1, 1, 2, 1, 2, 2, 2, 3, 1, 1, 1,
#           2, 3, 1, 1, 1, 1, 2, 1, 2, 0, 0, 1, 2, 2, 0, 2, 2, 0, 0,
#           1, 1, 2, 2, 0, 1, 2, 0, 2, 1, 2, 1, 2, 2, 0, 0, 0, 0, 3,
#           2, 1, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2,
#           3, 3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
#           3, 3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
#           3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
#           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
#           2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
#           2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
# y_pred = [2, 0, 2, 1, 2, 1, 2, 0, 3, 1, 0, 0, 1, 1, 2, 0, 2, 2, 2,
#           2, 2, 1, 1, 1, 0, 2, 3, 2, 2, 3, 0, 1, 1, 2, 1, 2, 3, 2,
#           2, 1, 1, 1, 2, 3, 1, 0, 2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 1,
#           2, 3, 0, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 3,
#           1, 0, 2, 0, 1, 1, 0, 2, 2, 2, 3, 1, 1, 2, 1, 1, 3, 1, 2,
#           2, 2, 2, 2, 1, 0, 2, 1, 2, 2, 2, 0, 1, 2, 0, 2, 2, 2, 2,
#           2, 2, 3, 2, 2, 2, 1, 0, 3, 2, 0, 0, 1, 2, 2, 0, 2, 0, 2,
#           1, 2, 3, 1, 0, 2, 1, 3, 2, 0, 1, 3, 2, 2, 1, 2, 0, 0, 0,
#           2, 1, 3, 1, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 1, 1, 0, 1, 2,
#           2, 1, 0, 0, 1, 0, 2, 1, 1, 1, 2, 2, 2, 2, 2, 0, 1, 1, 1,
#           2, 3, 1, 1, 2, 1, 2, 2, 2, 0, 0, 1, 2, 2, 0, 2, 2, 0, 0,
#           1, 1, 2, 2, 1, 1, 1, 0, 2, 1, 2, 1, 2, 2, 0, 0, 1, 0, 3,
#           2, 1, 2, 1, 0, 1, 3, 1, 2, 2, 2, 2,
#           3, 3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
#           3, 3 ,3 ,3 ,1 ,3 ,3 ,3 ,3 ,3, 3, 3, 3, 3, 3, 2, 3, 2, 3,
#           2, 1, 3, 2, 2, 3, 3, 2, 1, 2, 0, 0, 1, 0, 3, 2, 0, 1, 0,
#           0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,
#           2, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1,
#           2, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 2, 1, 1, 1, 2, 2, 1, 1,
#           2, 1, 0, 2, 0, 3, 3, 0, 1, 0, 1, 2, 1, 1, 1, 2, 2, 3, 1,
#           2, 1, 0, 2, 0, 3, 3, 0, 1, 2, 2, 0, 1, 1, 1, 2, 3, 1, 1,]
# densennet
y_test = [2, 3, 2, 1, 2, 1, 1, 0, 3, 1, 0, 0, 1, 1, 2, 0, 2, 1, 1,
          1, 2, 1, 1, 1, 0, 2, 3, 2, 2, 3, 0, 1, 1, 2, 1, 2, 3, 2,
          2, 1, 1, 1, 2, 3, 2, 0, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1,
          0, 3, 0, 1, 0, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 3,
          1, 0, 2, 3, 1, 1, 0, 1, 2, 2, 3, 1, 1, 2, 2, 1, 3, 1, 2,
          2, 2, 1, 2, 2, 3, 2, 0, 1, 2, 2, 0, 1, 1, 0, 2, 0, 2, 1,
          2, 1, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 1, 2, 2, 0, 2, 1, 2,
          1, 1, 3, 0, 0, 2, 1, 3, 2, 0, 1, 3, 2, 2, 1, 2, 0, 0, 3,
          2, 1, 3, 1, 2, 2, 2, 1, 0, 0, 2, 2, 1, 2, 1, 1, 1, 3, 2,
          2, 1, 1, 1, 1, 0, 2, 1, 1, 1, 2, 1, 2, 2, 2, 3, 1, 1, 1,
          2, 3, 1, 1, 1, 1, 2, 1, 2, 0, 0, 1, 2, 2, 0, 2, 2, 0, 0,
          1, 1, 2, 2, 0, 1, 2, 0, 2, 1, 2, 1, 2, 2, 0, 0, 0, 0, 3,
          2, 1, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2,
          3, 3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
y_pred = [2, 3, 2, 1, 2, 1, 1, 0, 3, 1, 0, 0, 1, 1, 2, 0, 2, 1, 1,
          1, 2, 1, 1, 1, 0, 2, 3, 2, 2, 3, 0, 1, 1, 2, 1, 2, 3, 2,
          2, 1, 1, 1, 2, 3, 2, 0, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1,
          0, 3, 0, 1, 0, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 3,
          1, 0, 2, 3, 1, 1, 0, 1, 2, 2, 3, 1, 1, 2, 2, 1, 3, 1, 2,
          2, 2, 1, 2, 2, 3, 2, 0, 1, 2, 2, 0, 1, 1, 0, 2, 0, 2, 1,
          2, 1, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 1, 2, 2, 0, 2, 1, 2,
          1, 1, 3, 0, 0, 2, 1, 3, 2, 0, 1, 3, 2, 2, 1, 2, 0, 0, 3,
          2, 1, 3, 1, 2, 2, 2, 1, 0, 0, 2, 2, 1, 2, 1, 1, 1, 3, 2,
          2, 1, 1, 1, 1, 0, 2, 1, 1, 1, 2, 1, 2, 2, 2, 3, 1, 1, 1,
          2, 3, 1, 1, 1, 1, 2, 1, 2, 0, 0, 1, 2, 2, 0, 2, 2, 0, 0,
          1, 1, 2, 2, 0, 1, 2, 0, 2, 1, 2, 1, 2, 2, 0, 0, 0, 0, 3,
          2, 1, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2,
          3, 3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          1, 1, 3, 2, 3, 3, 3, 3, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          2, 3, 3, 2, 2, 3, 3, 0, 1, 2, 3, 0, 1, 1, 1, 2, 2, 1, 1,
          0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]

# VGG+SVM
# y_test = [2, 3, 2, 1, 2, 1, 1, 0, 3, 1, 0, 0, 1, 1, 2, 0, 2, 1, 1,
#           1, 2, 1, 1, 1, 0, 2, 3, 2, 2, 3, 0, 1, 1, 2, 1, 2, 3, 2,
#           2, 1, 1, 1, 2, 3, 2, 0, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1,
#           0, 3, 0, 1, 0, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 3,
#           1, 0, 2, 3, 1, 1, 0, 1, 2, 2, 3, 1, 1, 2, 2, 1, 3, 1, 2,
#           2, 2, 1, 2, 2, 3, 2, 0, 1, 2, 2, 0, 1, 1, 0, 2, 0, 2, 1,
#           2, 1, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 1, 2, 2, 0, 2, 1, 2,
#           1, 1, 3, 0, 0, 2, 1, 3, 2, 0, 1, 3, 2, 2, 1, 2, 0, 0, 3,
#           2, 1, 3, 1, 2, 2, 2, 1, 0, 0, 2, 2, 1, 2, 1, 1, 1, 3, 2,
#           2, 1, 1, 1, 1, 0, 2, 1, 1, 1, 2, 1, 2, 2, 2, 3, 1, 1, 1,
#           2, 3, 1, 1, 1, 1, 2, 1, 2, 0, 0, 1, 2, 2, 0, 2, 2, 0, 0,
#           1, 1, 2, 2, 0, 1, 2, 0, 2, 1, 2, 1, 2, 2, 0, 0, 0, 0, 3,
#           2, 1, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2,
#           3, 3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
#           3, 3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
#           3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
#           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
#           2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
#           2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
# y_pred = [2, 0, 2, 1, 2, 1, 2, 0, 3, 1, 0, 0, 1, 1, 2, 0, 2, 2, 2,
#           2, 2, 1, 1, 1, 0, 2, 3, 2, 2, 3, 0, 1, 1, 2, 1, 2, 3, 2,
#           2, 1, 1, 1, 2, 3, 1, 0, 2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 1,
#           2, 3, 0, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 3,
#           1, 0, 2, 0, 1, 1, 0, 2, 2, 2, 3, 1, 1, 2, 1, 1, 3, 1, 2,
#           2, 1, 2, 2, 1, 0, 2, 1, 2, 2, 2, 0, 1, 2, 0, 2, 2, 2, 2,
#           2, 2, 1, 2, 2, 2, 1, 0, 1, 2, 0, 0, 1, 2, 2, 0, 2, 0, 2,
#           1, 2, 3, 1, 0, 2, 1, 3, 2, 0, 1, 3, 2, 2, 1, 2, 0, 0, 0,
#           2, 1, 3, 1, 2, 1, 2, 1, 0, 2, 2, 2, 1, 2, 1, 1, 0, 1, 2,
#           2, 1, 0, 2, 1, 0, 2, 1, 1, 1, 2, 2, 2, 2, 2, 0, 1, 1, 1,
#           2, 3, 1, 1, 2, 1, 2, 2, 2, 0, 0, 1, 2, 2, 0, 2, 2, 0, 0,
#           1, 1, 2, 2, 0, 1, 1, 0, 2, 1, 2, 1, 2, 2, 0, 0, 1, 0, 3,
#           2, 1, 2, 1, 0, 0, 3, 1, 2, 2, 2, 2,
#           3, 3 ,2 ,2 ,3 ,3 ,3 ,3 ,3 ,3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
#           1, 1, 3, 2, 3, 3, 3, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 1,
#           2, 3, 3, 2, 2, 3, 3, 0, 1, 2, 3, 0, 1, 1, 1, 2, 2, 1, 1,
#           0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 2, 0, 0, 1, 0, 0, 0, 0,
#           0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
#           2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1,
#           2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
#           1, 1, 1, 2, 1, 3, 3, 2, 1, 2, 2, 2, 1, 1, 1, 2, 1, 2, 1,
#           2, 1, 2, 2, 2, 3, 3, 3, 1, 2, 2, 2, 1, 2, 1, 2, 2, 1, 1,]


# ECRNet
y_test = [2, 3, 2, 1, 2, 1, 1, 0, 3, 1, 0, 0, 1, 1, 2, 0, 2, 1, 1,
          1, 2, 1, 1, 1, 0, 2, 3, 2, 2, 3, 0, 1, 1, 2, 1, 2, 3, 2,
          2, 1, 1, 1, 2, 3, 2, 0, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1,
          0, 3, 0, 1, 0, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 3,
          1, 0, 2, 3, 1, 1, 0, 1, 2, 2, 3, 1, 1, 2, 2, 1, 3, 1, 2,
          2, 2, 1, 2, 2, 3, 2, 0, 1, 2, 2, 0, 1, 1, 0, 2, 0, 2, 1,
          2, 1, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 1, 2, 2, 0, 2, 1, 2,
          1, 1, 3, 0, 0, 2, 1, 3, 2, 0, 1, 3, 2, 2, 1, 2, 0, 0, 3,
          2, 1, 3, 1, 2, 2, 2, 1, 0, 0, 2, 2, 1, 2, 1, 1, 1, 3, 2,
          2, 1, 1, 1, 1, 0, 2, 1, 1, 1, 2, 1, 2, 2, 2, 3, 1, 1, 1,
          2, 3, 1, 1, 1, 1, 2, 1, 2, 0, 0, 1, 2, 2, 0, 2, 2, 0, 0,
          1, 1, 2, 2, 0, 1, 2, 0, 2, 1, 2, 1, 2, 2, 0, 0, 0, 0, 3,
          2, 1, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2,
          3, 3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
y_pred = [2, 3, 2, 1, 2, 1, 1, 0, 3, 1, 0, 0, 1, 1, 2, 0, 2, 1, 1,
          1, 2, 1, 1, 1, 0, 2, 3, 2, 2, 3, 0, 1, 1, 2, 1, 2, 3, 2,
          2, 1, 1, 1, 2, 3, 2, 0, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1,
          0, 3, 0, 1, 0, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 3,
          1, 0, 2, 3, 1, 1, 0, 1, 2, 2, 3, 1, 1, 2, 2, 1, 3, 1, 2,
          2, 2, 1, 2, 2, 3, 2, 0, 1, 2, 2, 0, 1, 1, 0, 2, 0, 2, 1,
          2, 1, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 1, 2, 2, 0, 2, 1, 2,
          1, 1, 3, 0, 0, 2, 1, 3, 2, 0, 1, 3, 2, 2, 1, 2, 0, 0, 3,
          2, 1, 3, 1, 2, 2, 2, 1, 0, 0, 2, 2, 1, 2, 1, 1, 1, 3, 2,
          2, 1, 1, 1, 1, 0, 2, 1, 1, 1, 2, 1, 2, 2, 2, 3, 1, 1, 1,
          2, 3, 1, 1, 1, 1, 2, 1, 2, 0, 0, 1, 2, 2, 0, 2, 2, 0, 0,
          1, 1, 2, 2, 0, 1, 2, 0, 2, 1, 2, 1, 2, 2, 0, 0, 0, 0, 3,
          2, 1, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2,
          3, 3 ,1 ,1 ,2 ,2 ,1 ,3 ,3 ,0, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          1, 1, 1, 3, 1, 1, 1, 1, 3, 1, 1, 3, 1, 2, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,
          2, 2, 2, 2, 2, 2, 0, 0, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]


def plot_confusion_matrix(cm, classes,
                          normalize=False,
                          title='Confusion matrix',
                          cmap=plt.cm.Reds):
    """
    This function prints and plots the confusion matrix.
    Normalization can be applied by setting `normalize=True`.
    """
    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)

    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Normalized confusion matrix")
    else:
        print('Confusion matrix')

    print(cm)

    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, cm[i, j],
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")

    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label')
    plt.xticks(rotation=0)

#get the classification report
print(classification_report(y_test, y_pred, target_names=class_names))
print(metrics.accuracy_score(y_test, y_pred))
# Compute confusion matrix
cnf_matrix = confusion_matrix(y_test, y_pred)
np.set_printoptions(precision=2)

# Plot non-normalized confusion matrix
plt.figure()
plot_confusion_matrix(cnf_matrix, classes=class_names,
                      title='ECRNet')
plt.rcParams['savefig.dpi'] = 600
plt.rcParams['figure.dpi'] = 600
plt.savefig('ECRNet.jpg',bbox_inches='tight')
plt.show()



